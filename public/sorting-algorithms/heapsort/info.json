{
    "advantages": [
        "Efficient with a time complexity of O(n log n) in all cases (best, average, and worst).",
        "In-place sorting algorithm, requiring only a constant amount of additional memory (O(1)).",
        "Not sensitive to the input data; performs consistently regardless of the initial order of elements.",
        "Stable if implemented correctly, preserving the relative order of equal elements.",
        "Useful for large datasets where other algorithms may not perform well."
    ],
    "disadvantages": [
        "Not a stable sorting algorithm in its basic form, which may affect the order of equal elements.",
        "Slower in practice compared to more advanced algorithms like quicksort and mergesort for smaller datasets due to larger constant factors.",
        "The complexity of implementation is higher than simpler algorithms like bubble sort or insertion sort.",
        "Heap operations (insertions and deletions) can be slower compared to other structures, which may affect performance in certain applications."
    ]
}
