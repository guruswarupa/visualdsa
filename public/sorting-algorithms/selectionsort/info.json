{
    "advantages": [
        "Simple to understand and implement, making it a good choice for educational purposes.",
        "In-place sorting algorithm, requiring only a small, constant amount of additional memory (O(1)).",
        "Does not require any additional memory beyond the original array, which is beneficial for memory-constrained environments.",
        "Performs well on small datasets and is useful when the memory usage needs to be minimized."
    ],
    "disadvantages": [
        "Inefficient for large datasets, with a time complexity of O(n^2) in the average and worst cases.",
        "Not a stable sorting algorithm; equal elements may not retain their original order.",
        "Requires multiple passes through the list, resulting in a high number of comparisons and swaps.",
        "Slower than more advanced sorting algorithms like Quick Sort, Merge Sort, or Heap Sort for larger datasets."
    ]
}
