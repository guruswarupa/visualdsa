{
    "advantages": [
        "Guaranteed O(n log n) time complexity for all cases (best, average, and worst).",
        "Stable sorting algorithm, maintaining the relative order of equal elements.",
        "Works well with large datasets and is often used in external sorting (e.g., sorting large files).",
        "Can be easily parallelized, making it suitable for multi-threaded environments."
    ],
    "disadvantages": [
        "Requires additional memory space for temporary arrays (O(n)), making it less efficient for large datasets.",
        "Slower in practice compared to other algorithms like Quick Sort for smaller datasets due to overhead.",
        "Not an in-place sorting algorithm, which may lead to increased memory usage."
    ]
}
